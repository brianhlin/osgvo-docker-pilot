name: Build and test container images

on:
  push:
  pull_request:
  repository_dispatch:
    types:
      - dispatch-build
  workflow_dispatch:

jobs:
  standard-builds:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        osg_series: ['3.6']
        repo: ['development', 'testing', 'release']
    steps:
      - uses: opensciencegrid/build-container-action@v0.5.0
        with:
          osg_series: ${{ matrix.osg_series }}
          repo: ${{ matrix.repo }}
          timestamp_tag: ${{ needs.make-date-tag.outputs.dtag }}
          osg_repo: ${{ matrix.repo }}

  special-builds:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        osg_series: ['3.6']
        os: ['al8', 'cuda_11_8_0']
        repo: ['development', 'testing', 'release']
    steps:
      - id: custom-image-name
        env:
          SERIES: ${{ matrix.osg_series }}
          REPO: ${{ matrix.repo }}
          OS: ${{ matrix.os }}
        run: |
          echo "output_image=${GITHUB_REPOSITORY}:${SERIES}-${OS}-${REPO}" >> ${GITHUB_OUTPUT}

      - id: build-image
        uses: opensciencegrid/build-container-action@v0.5.0
        with:
          osg_series: ${{ matrix.osg_series }}
          osg_repo: ${{ matrix.repo }}
          base_os: ${{ matrix.os }}
          output_image: ${{ steps.custom-image-name.outputs.output_image }}

      - name: Run tests
        env:
          CONTAINER_IMAGE: ${{ steps.build-image.outputs.tags }}
        run: |
          for CONTAINER_RUNTIME in singularity docker; do
            for CVMFS_INSTALL in bindmount cvmfsexec; do
              if [[ $CVMFS_RUNTIME == 'singularity' ]] && \
                 [[ $CVMFS_INSTALL == cvmfsexec ]]; then
                   continue
              fi
              sudo ./tests/test_inside_gha.sh "$CONTAINER_RUNTIME" \
                                              "$CVMFS_INSTALL" \
                                              "$CONTAINER_IMAGE"
            done
          done
