name: dispatched build-docker-image

on:
  push:
  pull_request:
  repository_dispatch:
    types:
      - dispatch-build
  workflow_dispatch:

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
    - name: make date tag
      id: mkdatetag
      run: echo "::set-output name=dtag::$(date +%Y%m%d-%H%M)"

  build:
    runs-on: ubuntu-latest
    needs: [make-date-tag]
    strategy:
      matrix:
        repo: ['development', 'testing', 'release']

    steps:
    - name: checkout osgvo-docker-pilot
      uses: actions/checkout@v2

    - id: generate-tag-list
      env:
        REPO: ${{ matrix.repo }}
        TIMESTAMP: ${{ needs.make-date-tag.outputs.dtag }}
      run: |
        docker_repo=${GITHUB_REPOSITORY/brianhlin\/docker-/brianhlin/}
        tag_list=()
        for registry in hub.opensciencegrid.org; do
          for image_tag in "$REPO" "$REPO-$TIMESTAMP"; do
            tag_list+=("$registry/$docker_repo":"$image_tag")
          done
        done
        # This causes the tag_list array to be comma-separated below,
        # which is required for build-push-action
        IFS=,
        echo "::set-output name=taglist::${tag_list[*]}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to OSG Harbor
      uses: docker/login-action@v1
      with:
        registry: hub.opensciencegrid.org
        username: ${{ secrets.OSG_HARBOR_ROBOT_USER }}
        password: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}

    - name: Build Docker images
      uses: docker/build-push-action@v2.2.0
      with:
        push: ${{ github.event_name != 'pull_request' }}
        build-args: BASE_YUM_REPO=${{ matrix.repo }}
        tags: "${{ steps.generate-tag-list.outputs.taglist }}"


  test:
    runs-on: ubuntu-20.04
    needs: [build]
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        repo: ['development', 'testing', 'release']
        runtime: ['docker', 'singularity']
        cvmfs: ['bindmount', 'cvmfsexec']
    steps:
      # import cache
      - name: Install Singularity
        if: matrix.runtime == 'singularity'
        run: |
          sudo apt-get update && \
          sudo apt-get install -y singularity

      - name: Install CVMFS
        if: ${{ matrix.cvmfs == 'bindmount' }}
        run: |
          sudo apt-get install lsb-release
          wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
          wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-contrib-release/cvmfs-contrib-release-latest_all.deb
          sudo dpkg -i cvmfs-release-latest_all.deb cvmfs-contrib-release-latest_all.deb
          rm -f *.deb
          sudo apt-get update
          sudo apt-get install -y cvmfs-config-osg cvmfs

      - name: Start CVMFS
        if: ${{ matrix.cvmfs == 'bindmount' }}
        run: |
          sudo systemctl start autofs
          sudo sh -c 'echo "/cvmfs /etc/auto.cvmfs" > /etc/auto.master.d/cvmfs.autofs'
          sudo sh -c 'sudo cat << EOF > /etc/cvmfs/default.local
          CVMFS_REPOSITORIES="$((echo oasis.opensciencegrid.org;echo cms.cern.ch;ls /cvmfs)|sort -u|paste -sd ,)"
          CVMFS_QUOTA_LIMIT=2000
          CVMFS_HTTP_PROXY="DIRECT"
          EOF'
          sudo systemctl restart autofs
          ls -l /cvmfs/singularity.opensciencegrid.org

      - name: Verify 'HAS_SINGULARITY = True' (docker, bindmount)
        if: matrix.runtime == 'docker' && matrix.cvmfs == 'bindmount'
        run: |
          docker run -it --rm --user osg \
                --cap-add=DAC_OVERRIDE --cap-add=SETUID --cap-add=SETGID \
                --cap-add=DAC_READ_SEARCH \
                --cap-add=SYS_ADMIN --cap-add=SYS_CHROOT --cap-add=SYS_PTRACE \
                -v /cvmfs:/cvmfs:shared \
                -v /path/to/token:/etc/condor/tokens-orig.d/flock.opensciencegrid.org \
                -e GLIDEIN_Site="None" \
                -e GLIDEIN_ResourceName="None" \
                -e GLIDEIN_Start_Extra="True" \
                -e OSG_SQUID_LOCATION="None" \
                osgvo-docker-pilot:latest
                /usr/sbin/osgvo-node-advertise | fgrep "HAS_SINGULARITY = True"

      # - test startup??
      # - if failure, debug info OSG_GLIDEIN_VERSION, rpm -qa
