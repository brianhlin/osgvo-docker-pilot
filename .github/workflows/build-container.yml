name: Build and test container images

on:
  push:
  pull_request:
  repository_dispatch:
    types:
      - dispatch-build
  workflow_dispatch:

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && startsWith(github.repository, 'opensciencegrid/')
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
    - name: make date tag
      id: mkdatetag
      run: echo "::set-output name=dtag::$(date +%Y%m%d-%H%M)"

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ['development', 'testing', 'release']

    steps:
    - name: checkout osgvo-docker-pilot
      uses: actions/checkout@v2

    - name: Cache base image
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ matrix.repo }}-buildx-${{ github.sha }}-${{ github.run_id }}
        # allow cache hits from previous runs of the current branch,
        # parent branch, then upstream branches, in that order
        restore-keys: |
          ${{ matrix.repo }}-buildx-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker images
      uses: docker/build-push-action@v2.2.0
      with:
        context: .
        push: false
        build-args: BASE_YUM_REPO=${{ matrix.repo }}
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

  test:
    runs-on: ubuntu-20.04
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        repo: ['development', 'testing', 'release']
        runtime: ['docker', 'singularity']
        cvmfs: ['bindmount', 'cvmfsexec']
        exclude:
          - runtime: singularity
            cvmfs: cvmfsexec
    steps:
      - name: checkout osgvo-docker-pilot
        uses: actions/checkout@v2

      - name: Load osgvo-docker-pilot image
        uses: docker/build-push-action@v2.2.2
        with:
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          load: true  # allow access to built images through the Docker CLI
          tags: osgvo-docker-pilot:latest
          cache-from: type=local,src=/tmp/.buildx-cache

      - name: Run tests
        env:
          CONTAINER_RUNTIME: ${{ matrix.runtime }}
          CVMFS_INSTALL: ${{ matrix.cvmfs }}
        run: sudo ./tests/test_inside_gha.sh "$CONTAINER_RUNTIME" "$CVMFS_INSTALL"

  push:
    runs-on: ubuntu-latest
    needs: [make-date-tag, test]
    if: github.event_name != 'pull_request' && startsWith(github.repository, 'opensciencegrid/')
    strategy:
      matrix:
        repo: ['development', 'testing', 'release']
    steps:
      - name: Load cached base image
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.repo }}-buildx-${{ github.sha }}-${{ github.run_id }}

      - id: generate-tag-list
        env:
          REPO: ${{ matrix.repo }}
          TIMESTAMP: ${{ needs.make-date-tag.outputs.dtag }}
        run: |
          docker_repo=${GITHUB_REPOSITORY/brianhlin\/docker-/brianhlin/}
          tag_list=()
          for registry in hub.opensciencegrid.org; do
            for image_tag in "$REPO" "$REPO-$TIMESTAMP"; do
              tag_list+=("$registry/$docker_repo":"$image_tag")
            done
          done
          # This causes the tag_list array to be comma-separated below,
          # which is required for build-push-action
          IFS=,
          echo "::set-output name=taglist::${tag_list[*]}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to OSG Harbor
        uses: docker/login-action@v1
        with:
          registry: hub.opensciencegrid.org
          username: ${{ secrets.OSG_HARBOR_ROBOT_USER }}
          password: ${{ secrets.OSG_HARBOR_ROBOT_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.2.2
        with:
          push: true
          context: .
          build-args: BASE_YUM_REPO=${{ matrix.repo }}
          tags: "${{ steps.generate-tag-list.outputs.taglist }}"
          cache-from: type=local,src=/tmp/.buildx-cache
