#!/usr/bin/python3

import os
import sys
import json

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend

from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes

import requests

# First, generate a new host key.
key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend(),
)

key_bytes = key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.TraditionalOpenSSL,
    encryption_algorithm=serialization.NoEncryption()
)

csr = x509.CertificateSigningRequestBuilder(
   ).subject_name(x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, u"will_be_overwritten")])
   ).sign(key, hashes.SHA256(), backend=default_backend())


csr_bytes = csr.public_bytes(serialization.Encoding.PEM).decode()

with open(sys.argv[1], "rb") as fp:
    token = fp.read().strip()

if len(sys.argv) > 2:
    registry_hostname = sys.argv[2]
else:
    registry_hostname = "os-registry.opensciencegrid.org"

try:
    response = requests.post(f"https://{registry_hostname}/syslog-ca/issue", data={"csr": csr_bytes},
        headers={"Authorization": f"Bearer {token.decode()}"},
        timeout=20,
    )
except OSError as err:
    print("*** Error downloading certificate from registry: %s" % err, file=sys.stderr)
    raise
try:
    response_dict = response.json()
    assert "ca" in response_dict
    assert "certificate" in response_dict
except (AssertionError, ValueError) as err:
    print("*** Bad data received from registry: %s" % err, file=sys.stderr)
    print("*** Received data: %s %s" % (response.status_code, response.text), file=sys.stderr)
response_dict["key"] = key_bytes.decode()

os.makedirs("/etc/pki/rsyslog", exist_ok=True)
with open("/etc/pki/rsyslog/ca.crt", "w") as fp:
    fp.write(response_dict["ca"])
with open("/etc/pki/rsyslog/tls.crt", "w") as fp:
    fp.write(response_dict["certificate"])
with open("/etc/pki/rsyslog/tls.key", "w") as fp:
    fp.write(response_dict["key"])
